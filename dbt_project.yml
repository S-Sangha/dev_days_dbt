
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dev_days_dbt'
version: '1.1.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'dev_days_dbt'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  dbt_order_costs:
    # Define configuration for different directories under models/
    +tags: all_models
    # For staging models (should be materialized as views for cleaning and transformation)
    staging:
      +materialized: view
    
    # For the derived models (costs, spend_per_user) use tables for performance
    metrics:
      +materialized: table

    # If you want any specific model configurations for individual models:
    # example model configurations
    example_model:
      +materialized: table

    # If you want more fine-grained control over individual models, you can define them like so:
    costs:
      +materialized: table
    spend_per_user:
      +materialized: table

# You can add additional configurations here based on your needs
